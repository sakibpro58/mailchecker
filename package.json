{
  "name": "mailchecker",
  "version": "6.0.11",
  "description": "Cross-language temporary (disposable/throwaway) email detection library. Covers hundreds fake email providers.",
  "main": "platform/node/index.js",
  "files": [
    "platform/node/index.js",
    "types.d.ts"
  ],
  "scripts": {
    "build": "node lib/clean.js && node gen.js",
    "setup": "npm run build && npm-run-all --max-parallel 2 --parallel setup:*",
    "setup:ruby": "docker run -i -v $(pwd):/app -w /app ruby:2.2 bash -c 'gem install bundler -v 1.17.3 && bundler'",
    "setup:clojure": "docker run -i -v $(pwd):/app -w /app clojure:lein-2.8.1 lein install",
    "setup:rust": "docker run -i -v $(pwd)/platform/rust:/source -w /source -e CARGO_HOME=/source/cargo rust:1.74.0-slim-buster cargo build",
    "full-build": "npm run build && npm run compile",
    "test": "npm run build && npm-run-all --max-parallel 1 --parallel test:*",
    "test:clojure": "echo 'skipping clojure test because it cant handle code too large' || docker run -i -v $(pwd):/app -w /app clojure:lein-2.8.1 lein exec test/platform.clojure.test.clj",
    "test:elixir": "docker run -i -v $(pwd):/app -w /app elixir:1.6-slim elixir test/platform.elixir.test.exs",
    "test:go": "docker run -i -v $(pwd):/app -w /app golang:1.13-alpine3.10 go test ./...",
    "test:node": "mocha --timeout 10000 -r should -R spec -u tdd",
    "test:php": "docker run --platform linux/amd64 -i -v $(pwd):/code -e XDEBUG_MODE=coverage -w /code pipelinecomponents/phpunit phpunit test/platform.php.test.php",
    "test:python": "docker run -i -v $(pwd):/app -w /app python:2.7-alpine3.7 python test/*.test.py",
    "test:python3": "docker run -i -v $(pwd):/app -w /app python:3.6-alpine3.7 python test/*.test.py",
    "test:ruby": "docker run -i -v $(pwd):/app -w /app ruby:2.2 ruby test/platform.ruby.test.rb",
    "test:rust": "docker run -i -v $(pwd)/platform/rust:/source -w /source -e CARGO_HOME=/source/cargo rust:1.74.0-slim-buster cargo test",
    "watch": "mocha -r should -R spec -u tdd -w",
    "compile": "projectz compile",
    "updtr": "updtr",
    "changelog": "github-changes --owner $(node -p \"require('./package.json').repository.url.split('/')[3];\") --repository $(node -p \"a=require('./package.json').repository.url.split('/');a[a.length-1].split('.')[0]\") --token $CHANGELOG_GITHUB_TOKEN_FG -f CHANGELOG.md",
    "changelog-git": "npm run changelog && git add CHANGELOG.md && git commit -m 'docs(changelog): updated' && git push origin master",
    "release-after-pr": "git pull --rebase && npm run full-build && npm run test && git commit -a -m 'feat(build): update plateform files' && npm-release patch && npm run release-cross",
    "release-patch": "npm run full-build && npm run test && git commit -a -m 'feat(build): update plateform files' && npm-release patch && npm run release-cross",
    "release-minor": "npm run full-build && npm run test && git commit -a -m 'feat(build): update plateform files' && npm-release minor && npm run release-cross",
    "release-cross": "npm run changelog-git && npm run publish-gem && npm run publish-python && npm run publish-go && npm run publish-cargo",
    "publish-go": "version=$(echo $npm_package_version | cut -d '.' -f 1) && sed -E -i '' \"s#github.com/FGRibreau/mailchecker/(.*)#github.com/FGRibreau/mailchecker/v${version}#g\" go.mod",
    "publish-gem": "sed -E -i '' \"s/spec.version[[:space:]]*=(.*)/spec.version='${npm_package_version}'/g\" *.gemspec && (git add *.gemspec && git commit -m \"feat(gemspec): updated to ${npm_package_version}\" || true) && gem build *.gemspec && gem push ruby-mailchecker-${npm_package_version}.gem",
    "publish-cargo": "cd platform/rust && sed -E -i '' \"s/version[[:space:]]*=(.*)/version = \\\"${npm_package_version}\\\"/g\" Cargo.toml && (git add Cargo.toml && git add Cargo.lock && git commit -m \"feat(cargo): updated to ${npm_package_version}\" && git push || true); sleep 3; pwd; (git add Cargo.lock && git commit -m 'chore: update Cargo.lock' && git push || true) && cargo package --allow-dirty && cargo publish --allow-dirty",
    "publish-python": "cd platform/python && sed -E -i '' \"s/version[[:space:]]*=(.*)/version = \\\"${npm_package_version}\\\",/g\" setup.py && (git add setup.py && git commit -m \"feat(python): updated to ${npm_package_version}\" || true) && rm -rf dist/* && python3 setup.py sdist && twine upload --repository mailchecker dist/*",
    "start": "ts-node build/server.ts"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/FGRibreau/mailchecker.git"
  },
  "keywords": [
    "email",
    "domains",
    "disposable"
  ],
  "engines": {
    "node": ">=0.10"
  },
  "browsers": false,
  "maintainers": [
    "Francois-Guillaume Ribreau <github@fgribreau.com> (http://bit.ly/2c7uFJq)"
  ],
  "sponsors": [],
  "dependencies": {
    "async": "^3.1.0",
    "eventemitter2": "^6.0.0",
    "glob": "^7.0.3",
    "lodash": "^4.17.15",
    "mu2": "~0.5.20",
    "node-range": "0.1.x",
    "express": "^4.17.3",
    "ts-node": "^10.0.0"
  },
  "devDependencies": {
    "github-changes": "^2.0.3",
    "mocha": "^7.0.0",
    "nodeunit": "^0.11.3",
    "npm-release": "^1.0.0",
    "npm-run-all": "^4.1.5",
    "projectz": "^1.19.0",
    "psl": "^1.7.0",
    "should": "^13.2.3",
    "updtr": "^3.1.0",
    "@types/express": "^4.17.13",
    "typescript": "^4.0.0"
  },
  "typings": "./types.d.ts",
  "bugs": {
    "url": "https://github.com/FGRibreau/mailchecker/issues"
  }
}
